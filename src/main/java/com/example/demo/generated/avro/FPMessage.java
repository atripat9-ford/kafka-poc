/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.demo.generated.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class FPMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6575197902284580151L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FPMessage\",\"namespace\":\"com.example.demo.generated.avro\",\"fields\":[{\"name\":\"eventType\",\"type\":\"string\"},{\"name\":\"eventId\",\"type\":\"string\"},{\"name\":\"userGuid\",\"type\":\"string\"},{\"name\":\"vin\",\"type\":\"string\"},{\"name\":\"originator\",\"type\":\"string\"},{\"name\":\"publisher\",\"type\":\"string\"},{\"name\":\"originationTimestamp\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.CharSequence eventType;
   private java.lang.CharSequence eventId;
   private java.lang.CharSequence userGuid;
   private java.lang.CharSequence vin;
   private java.lang.CharSequence originator;
   private java.lang.CharSequence publisher;
   private java.lang.CharSequence originationTimestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FPMessage() {}

  /**
   * All-args constructor.
   * @param eventType The new value for eventType
   * @param eventId The new value for eventId
   * @param userGuid The new value for userGuid
   * @param vin The new value for vin
   * @param originator The new value for originator
   * @param publisher The new value for publisher
   * @param originationTimestamp The new value for originationTimestamp
   */
  public FPMessage(java.lang.CharSequence eventType, java.lang.CharSequence eventId, java.lang.CharSequence userGuid, java.lang.CharSequence vin, java.lang.CharSequence originator, java.lang.CharSequence publisher, java.lang.CharSequence originationTimestamp) {
    this.eventType = eventType;
    this.eventId = eventId;
    this.userGuid = userGuid;
    this.vin = vin;
    this.originator = originator;
    this.publisher = publisher;
    this.originationTimestamp = originationTimestamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventType;
    case 1: return eventId;
    case 2: return userGuid;
    case 3: return vin;
    case 4: return originator;
    case 5: return publisher;
    case 6: return originationTimestamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventType = (java.lang.CharSequence)value$; break;
    case 1: eventId = (java.lang.CharSequence)value$; break;
    case 2: userGuid = (java.lang.CharSequence)value$; break;
    case 3: vin = (java.lang.CharSequence)value$; break;
    case 4: originator = (java.lang.CharSequence)value$; break;
    case 5: publisher = (java.lang.CharSequence)value$; break;
    case 6: originationTimestamp = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public java.lang.CharSequence getEventType() {
    return eventType;
  }

  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.CharSequence value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.CharSequence getEventId() {
    return eventId;
  }

  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(java.lang.CharSequence value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'userGuid' field.
   * @return The value of the 'userGuid' field.
   */
  public java.lang.CharSequence getUserGuid() {
    return userGuid;
  }

  /**
   * Sets the value of the 'userGuid' field.
   * @param value the value to set.
   */
  public void setUserGuid(java.lang.CharSequence value) {
    this.userGuid = value;
  }

  /**
   * Gets the value of the 'vin' field.
   * @return The value of the 'vin' field.
   */
  public java.lang.CharSequence getVin() {
    return vin;
  }

  /**
   * Sets the value of the 'vin' field.
   * @param value the value to set.
   */
  public void setVin(java.lang.CharSequence value) {
    this.vin = value;
  }

  /**
   * Gets the value of the 'originator' field.
   * @return The value of the 'originator' field.
   */
  public java.lang.CharSequence getOriginator() {
    return originator;
  }

  /**
   * Sets the value of the 'originator' field.
   * @param value the value to set.
   */
  public void setOriginator(java.lang.CharSequence value) {
    this.originator = value;
  }

  /**
   * Gets the value of the 'publisher' field.
   * @return The value of the 'publisher' field.
   */
  public java.lang.CharSequence getPublisher() {
    return publisher;
  }

  /**
   * Sets the value of the 'publisher' field.
   * @param value the value to set.
   */
  public void setPublisher(java.lang.CharSequence value) {
    this.publisher = value;
  }

  /**
   * Gets the value of the 'originationTimestamp' field.
   * @return The value of the 'originationTimestamp' field.
   */
  public java.lang.CharSequence getOriginationTimestamp() {
    return originationTimestamp;
  }

  /**
   * Sets the value of the 'originationTimestamp' field.
   * @param value the value to set.
   */
  public void setOriginationTimestamp(java.lang.CharSequence value) {
    this.originationTimestamp = value;
  }

  /**
   * Creates a new FPMessage RecordBuilder.
   * @return A new FPMessage RecordBuilder
   */
  public static Builder newBuilder() {
    return new com.example.demo.generated.avro.FPMessage.Builder();
  }

  /**
   * Creates a new FPMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FPMessage RecordBuilder
   */
  public static Builder newBuilder(com.example.demo.generated.avro.FPMessage.Builder other) {
    return new com.example.demo.generated.avro.FPMessage.Builder(other);
  }

  /**
   * Creates a new FPMessage RecordBuilder by copying an existing FPMessage instance.
   * @param other The existing instance to copy.
   * @return A new FPMessage RecordBuilder
   */
  public static Builder newBuilder(com.example.demo.generated.avro.FPMessage other) {
    return new com.example.demo.generated.avro.FPMessage.Builder(other);
  }

  /**
   * RecordBuilder for FPMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FPMessage>
    implements org.apache.avro.data.RecordBuilder<FPMessage> {

    private java.lang.CharSequence eventType;
    private java.lang.CharSequence eventId;
    private java.lang.CharSequence userGuid;
    private java.lang.CharSequence vin;
    private java.lang.CharSequence originator;
    private java.lang.CharSequence publisher;
    private java.lang.CharSequence originationTimestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.demo.generated.avro.FPMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventType)) {
        this.eventType = data().deepCopy(fields()[0].schema(), other.eventType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventId)) {
        this.eventId = data().deepCopy(fields()[1].schema(), other.eventId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userGuid)) {
        this.userGuid = data().deepCopy(fields()[2].schema(), other.userGuid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.vin)) {
        this.vin = data().deepCopy(fields()[3].schema(), other.vin);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.originator)) {
        this.originator = data().deepCopy(fields()[4].schema(), other.originator);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.publisher)) {
        this.publisher = data().deepCopy(fields()[5].schema(), other.publisher);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.originationTimestamp)) {
        this.originationTimestamp = data().deepCopy(fields()[6].schema(), other.originationTimestamp);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing FPMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.demo.generated.avro.FPMessage other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventType)) {
        this.eventType = data().deepCopy(fields()[0].schema(), other.eventType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventId)) {
        this.eventId = data().deepCopy(fields()[1].schema(), other.eventId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.userGuid)) {
        this.userGuid = data().deepCopy(fields()[2].schema(), other.userGuid);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.vin)) {
        this.vin = data().deepCopy(fields()[3].schema(), other.vin);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.originator)) {
        this.originator = data().deepCopy(fields()[4].schema(), other.originator);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.publisher)) {
        this.publisher = data().deepCopy(fields()[5].schema(), other.publisher);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.originationTimestamp)) {
        this.originationTimestamp = data().deepCopy(fields()[6].schema(), other.originationTimestamp);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventType() {
      return eventType;
    }

    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public Builder setEventType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.eventType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventId() {
      return eventId;
    }

    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public Builder setEventId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.eventId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'userGuid' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserGuid() {
      return userGuid;
    }

    /**
      * Sets the value of the 'userGuid' field.
      * @param value The value of 'userGuid'.
      * @return This builder.
      */
    public Builder setUserGuid(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.userGuid = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'userGuid' field has been set.
      * @return True if the 'userGuid' field has been set, false otherwise.
      */
    public boolean hasUserGuid() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'userGuid' field.
      * @return This builder.
      */
    public Builder clearUserGuid() {
      userGuid = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'vin' field.
      * @return The value.
      */
    public java.lang.CharSequence getVin() {
      return vin;
    }

    /**
      * Sets the value of the 'vin' field.
      * @param value The value of 'vin'.
      * @return This builder.
      */
    public Builder setVin(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.vin = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'vin' field has been set.
      * @return True if the 'vin' field has been set, false otherwise.
      */
    public boolean hasVin() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'vin' field.
      * @return This builder.
      */
    public Builder clearVin() {
      vin = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'originator' field.
      * @return The value.
      */
    public java.lang.CharSequence getOriginator() {
      return originator;
    }

    /**
      * Sets the value of the 'originator' field.
      * @param value The value of 'originator'.
      * @return This builder.
      */
    public Builder setOriginator(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.originator = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'originator' field has been set.
      * @return True if the 'originator' field has been set, false otherwise.
      */
    public boolean hasOriginator() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'originator' field.
      * @return This builder.
      */
    public Builder clearOriginator() {
      originator = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'publisher' field.
      * @return The value.
      */
    public java.lang.CharSequence getPublisher() {
      return publisher;
    }

    /**
      * Sets the value of the 'publisher' field.
      * @param value The value of 'publisher'.
      * @return This builder.
      */
    public Builder setPublisher(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.publisher = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'publisher' field has been set.
      * @return True if the 'publisher' field has been set, false otherwise.
      */
    public boolean hasPublisher() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'publisher' field.
      * @return This builder.
      */
    public Builder clearPublisher() {
      publisher = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'originationTimestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getOriginationTimestamp() {
      return originationTimestamp;
    }

    /**
      * Sets the value of the 'originationTimestamp' field.
      * @param value The value of 'originationTimestamp'.
      * @return This builder.
      */
    public Builder setOriginationTimestamp(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.originationTimestamp = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'originationTimestamp' field has been set.
      * @return True if the 'originationTimestamp' field has been set, false otherwise.
      */
    public boolean hasOriginationTimestamp() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'originationTimestamp' field.
      * @return This builder.
      */
    public Builder clearOriginationTimestamp() {
      originationTimestamp = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public FPMessage build() {
      try {
        FPMessage record = new FPMessage();
        record.eventType = fieldSetFlags()[0] ? this.eventType : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.eventId = fieldSetFlags()[1] ? this.eventId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.userGuid = fieldSetFlags()[2] ? this.userGuid : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.vin = fieldSetFlags()[3] ? this.vin : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.originator = fieldSetFlags()[4] ? this.originator : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.publisher = fieldSetFlags()[5] ? this.publisher : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.originationTimestamp = fieldSetFlags()[6] ? this.originationTimestamp : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
